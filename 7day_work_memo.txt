Amazon Linux 2023 에서 MySQL 클라이언트 설치
1. sudo dnf install mariadb105
클라이언트의 버전 확인
mysql --version
man mysql

Anthropic
Google Sheets add-on 설치
구글워크시트에서 claude 함수를 사용하는 번역
=claude(A1 & "번역해줘")
=claude("hi " , "anthropic.claude-3-haiku-20240307-v1:0" , "max_tokens" , "5")

모델	Anthropic API	AWS Bedrock	GCP Vertex AI
Claude 3.5 Sonnet	claude-3-5-sonnet-20241022 (claude-3-5-sonnet-latest)	anthropic.claude-3-5-sonnet-20241022-v2:0	claude-3-5-sonnet-v2@20241022
Claude 3.5 Haiku	claude-3-5-haiku-20241022 (claude-3-5-haiku-latest)	anthropic.claude-3-5-haiku-20241022-v1:0	claude-3-5-haiku@20241022
모델	Anthropic API	AWS Bedrock	GCP Vertex AI
Claude 3 Opus	claude-3-opus-20240229 (claude-3-opus-latest)	anthropic.claude-3-opus-20240229-v1:0	claude-3-opus@20240229
Claude 3 Sonnet	claude-3-sonnet-20240229	anthropic.claude-3-sonnet-20240229-v1:0	claude-3-sonnet@20240229
Claude 3 Haiku	claude-3-haiku-20240307	anthropic.claude-3-haiku-20240307-v1:0	claude-3-haiku@20240307


SQS : 1대1 
SNS : 1대N (Email, SMS, Push... , Kinesis Data Firehose)

Kinesis Data Streams
Kinesis Data Firehost

AWS Step Functions
시각적 워크플로를 사용한 마이크로서비스 조정
애플리케이션 기능을 단계별로 실행

복잡한 분산 워크플로의 오케스트레이션

짧은 폴링 , 긴 폴링

엣지서비스  CDN
Akamai
Cloudflare
CloudFront
CDNetworks


로드밸런서 분산 트래픽 - route 53

cloudfront

AWS Shield

AWS WAF


컨테이너
chroot , cgroup, namespace

https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/create-container-image.html
도커
1. 최신 Amazon Linux 2023 AMI에서 인스턴스를 시작합니다. 
2. 인스턴스에 연결합니다
3. 인스턴스에 설치한 패키지 및 패키지 캐시를 업데이트합니다.
sudo yum update -y
4. 최신 Docker Community Edition 패키지를 설치합니다.
sudo yum install docker
5. Docker 서비스를 시작합니다.
sudo service docker start
6. sudo를 사용하지 않고도 Docker 명령을 실행할 수 있도록 docker 그룹에 ec2-user를 추가합니다.
sudo usermod -a -G docker ec2-user
7. 로그아웃하고 다시 로그인해서 새 docker 그룹 권한을 선택합니다. 이를 위해 현재 SSH 터미널 창을 닫고 새 창에서 인스턴스를 다시 연결할 수 있습니다. 새 SSH 세션은 해당되는 docker 그룹 권한을 갖게 됩니다.
VS Code 에서는 프로그램 종료 후 재실행 필요
8. sudo 없이도 ec2-user가 Docker 명령을 실행할 수 있는지 확인합니다.
docker info

docker Swarm

[ec2-user@ip-172-31-33-174 ~]$ docker info
Client:
 Version:    25.0.5
 Context:    default
 Debug Mode: false
 Plugins:
  buildx: Docker Buildx (Docker Inc.)
    Version:  v0.0.0+unknown
    Path:     /usr/libexec/docker/cli-plugins/docker-buildx

Server:
 Containers: 0
  Running: 0
  Paused: 0
  Stopped: 0
 Images: 0
 Server Version: 25.0.6
 Storage Driver: overlay2
  Backing Filesystem: xfs
  Supports d_type: true
  Using metacopy: false
  Native Overlay Diff: true
  userxattr: false
 Logging Driver: json-file
 Cgroup Driver: systemd
 Cgroup Version: 2
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog
 Swarm: inactive
 Runtimes: io.containerd.runc.v2 runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: bcc810d6b9066471b0b6fa75f557a15a1cbf31bb
 runc version: 6c52b3fc541fb26fe8c374d5f58112a0a5dbda66
 init version: de40ad0
 Security Options:
  seccomp
   Profile: builtin
  cgroupns
 Kernel Version: 6.1.127-135.201.amzn2023.x86_64
 Operating System: Amazon Linux 2023.6.20250211
 OSType: linux
 Architecture: x86_64
 CPUs: 1
 Total Memory: 949.5MiB
 Name: ip-172-31-33-174.ap-northeast-2.compute.internal
 ID: 22746931-a64d-47d5-8cba-3cfedd7eb062
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false

[ec2-user@ip-172-31-33-174 ~]$ 


[ec2-user@ip-172-31-33-174 ~]$ touch Dockerfile
[ec2-user@ip-172-31-33-174 ~]$ vi Dockerfile
[ec2-user@ip-172-31-33-174 ~]$ ll
total 4
-rw-rw-r--. 1 ec2-user ec2-user 501 Feb 15 05:32 Dockerfile
[ec2-user@ip-172-31-33-174 ~]$ pwd
/home/ec2-user
[ec2-user@ip-172-31-33-174 ~]$ docker build -t hello-world .
[+] Building 24.4s (8/8) FINISHED                                                                                                                                                                                    docker:default
 => [internal] load build definition from Dockerfile                                                                                                                                                                           0.1s
 => => transferring dockerfile: 599B                                                                                                                                                                                           0.0s
 => [internal] load metadata for public.ecr.aws/amazonlinux/amazonlinux:latest                                                                                                                                                 2.1s
 => [internal] load .dockerignore                                                                                                                                                                                              0.0s
 => => transferring context: 2B                                                                                                                                                                                                0.0s
 => [1/4] FROM public.ecr.aws/amazonlinux/amazonlinux:latest@sha256:929dfd2e99503e4b15b9a921cdcd395a0bc9586523eb3e599e7393e0cb78a8eb                                                                                           4.1s
 => => resolve public.ecr.aws/amazonlinux/amazonlinux:latest@sha256:929dfd2e99503e4b15b9a921cdcd395a0bc9586523eb3e599e7393e0cb78a8eb                                                                                           0.0s
 => => sha256:929dfd2e99503e4b15b9a921cdcd395a0bc9586523eb3e599e7393e0cb78a8eb 770B / 770B                                                                                                                                     0.0s
 => => sha256:d51588929b7072834f718797746a080f001b1c304a1971316e2b93d5d079a8ea 528B / 528B                                                                                                                                     0.0s
 => => sha256:685d3917ce812fda242c41cfcb5e10ba0f16aa7c3282c2f430911132a10afe7b 662B / 662B                                                                                                                                     0.0s
 => => sha256:c49f57a74cc8de28dac424b9c32eec0466ea1896a8af5e0b98053d1a9bea7340 53.15MB / 53.15MB                                                                                                                               0.8s
 => => extracting sha256:c49f57a74cc8de28dac424b9c32eec0466ea1896a8af5e0b98053d1a9bea7340                                                                                                                                      3.1s
 => [2/4] RUN yum update -y &&  yum install -y httpd                                                                                                                                                                          16.0s
 => [3/4] RUN echo 'Hello World!' > /var/www/html/index.html                                                                                                                                                                   0.6s 
 => [4/4] RUN echo 'mkdir -p /var/run/httpd' >> /root/run_apache.sh &&  echo 'mkdir -p /var/lock/httpd' >> /root/run_apache.sh &&  echo '/usr/sbin/httpd -D FOREGROUND' >> /root/run_apache.sh &&  chmod 755 /root/run_apache  0.3s 
 => exporting to image                                                                                                                                                                                                         1.1s 
 => => exporting layers                                                                                                                                                                                                        1.1s 
 => => writing image sha256:02d3d96394fa6209d4cbb9b433bf998dbc2516caa5e0a2454dca798ad3bce422                                                                                                                                   0.0s 
 => => naming to docker.io/library/hello-world                                                                                                                                                                                 0.0s 
[ec2-user@ip-172-31-33-174 ~]$ docker images
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
hello-world   latest    02d3d96394fa   24 seconds ago   288MB
[ec2-user@ip-172-31-33-174 ~]$ docker ls images
docker: 'ls' is not a docker command.
See 'docker --help'
[ec2-user@ip-172-31-33-174 ~]$ docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Common Commands:
  run         Create and run a new container from an image
  exec        Execute a command in a running container
  ps          List containers
  build       Build an image from a Dockerfile
  pull        Download an image from a registry
  push        Upload an image to a registry
  images      List images
  login       Log in to a registry
  logout      Log out from a registry
  search      Search Docker Hub for images
  version     Show the Docker version information
  info        Display system-wide information

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.0.0+unknown)
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  plugin      Manage plugins
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Swarm Commands:
  swarm       Manage Swarm

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Global Options:
      --config string      Location of client config files (default "/home/ec2-user/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket to connect to
  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/home/ec2-user/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/home/ec2-user/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/home/ec2-user/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Run 'docker COMMAND --help' for more information on a command.

For more help on how to use Docker, head to https://docs.docker.com/go/guides/
[ec2-user@ip-172-31-33-174 ~]$ docker run -t -i -p 80:80 hello-world
AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message
^C[ec2-user@ip-172-31-33-174 ~]$ docker run -it -dp 80:80 hello-world <== backgroupd
f010632219ce18eae43862e56c3a5a7e8deb33298a3b0270a3b9c9aab335460e

role 추가

https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/create-container-image.html#create-container-image-prerequisites

aws ecr create-repository --repository-name hello-repository --region ap-northeast-2


docker tag hello-world aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

docker tag hello-world 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository

aws ecr get-login-password --region region | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com

aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com

docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

docker push 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository

docker ps -a

[ec2-user@ip-172-31-33-174 ~]$ aws ecr create-repository --repository-name hello-repository --region ap-northeast-2

Unable to locate credentials. You can configure credentials by running "aws configure".
[ec2-user@ip-172-31-33-174 ~]$ aws configure
AWS Access Key ID [None]: ....
AWS Secret Access Key [None]: .....
Default region name [None]: ap-northeast-2
Default output format [None]: 
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ aws ecr create-repository --repository-name hello-repository --region ap-northeast-2
{
    "repository": {
        "repositoryArn": "arn:aws:ecr:ap-northeast-2:451750060695:repository/hello-repository",
        "registryId": "451750060695",
        "repositoryName": "hello-repository",
        "repositoryUri": "451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository",
        "createdAt": "2025-02-15T05:45:53.302000+00:00",
        "imageTagMutability": "MUTABLE",
        "imageScanningConfiguration": {
            "scanOnPush": false
        },
        "encryptionConfiguration": {
            "encryptionType": "AES256"
        }
    }
}
[ec2-user@ip-172-31-33-174 ~]$ aws configure list
      Name                    Value             Type    Location
      ----                    -----             ----    --------
   profile                <not set>             None    None
access_key     ****************C5HS shared-credentials-file    
secret_key     ****************d0Z/ shared-credentials-file    
    region           ap-northeast-2      config-file    ~/.aws/config
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ docker tag hello-world 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository
[ec2-user@ip-172-31-33-174 ~]$ docker ps -a
CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                      PORTS                               NAMES
f010632219ce   hello-world   "/bin/sh -c /root/ru…"   15 minutes ago   Up 15 minutes               0.0.0.0:80->80/tcp, :::80->80/tcp   awesome_keller
638a5eecdc5a   hello-world   "/bin/sh -c /root/ru…"   18 minutes ago   Exited (0) 15 minutes ago                                       lucid_shirley
[ec2-user@ip-172-31-33-174 ~]$ docker images
REPOSITORY                                                           TAG       IMAGE ID       CREATED          SIZE
451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository   latest    02d3d96394fa   20 minutes ago   288MB
hello-world                                                          latest    02d3d96394fa   20 minutes ago   288MB
[ec2-user@ip-172-31-33-174 ~]$ aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com
WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
[ec2-user@ip-172-31-33-174 ~]$ 
[ec2-user@ip-172-31-33-174 ~]$ docker push 451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository
Using default tag: latest
The push refers to repository [451750060695.dkr.ecr.ap-northeast-2.amazonaws.com/hello-repository]
c1f26c345c6f: Pushed 
a008b6e97826: Pushed 
662ff8ad2c34: Pushed 
ae11e0e1f4b7: Pushed 
latest: digest: sha256:14016839eeb22c956b3d077053b51d925af60ccb5fcb52f7c68dad628f622b76 size: 1155
[ec2-user@ip-172-31-33-174 ~]$


vpc and more

az 2개
public
2a , 2c

private
az 2개

